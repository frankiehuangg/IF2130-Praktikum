000016d7 <Holoro>:
    16d7:	f3 0f 1e fb          	endbr32
    16db:	57                   	push   %edi
    16dc:	56                   	push   %esi
    16dd:	53                   	push   %ebx
    16de:	83 ec 28             	sub    $0x28,%esp
    16e1:	e8 0a fd ff ff       	call   13f0 <__x86.get_pc_thunk.bx>
    16e6:	81 c3 7a 58 00 00    	add    $0x587a,%ebx
    16ec:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
    16f2:	89 44 24 24          	mov    %eax,0x24(%esp)
    16f6:	31 c0                	xor    %eax,%eax				// eax = 0
    16f8:	8d 44 24 0c          	lea    0xc(%esp),%eax			// eax = esp+12
    16fc:	50                   	push   %eax						
    16fd:	ff 74 24 3c          	push   0x3c(%esp)
    1701:	e8 7f 0a 00 00       	call   2185 <read_six_numbers>	// read_six_numbers(esp+60, eax)
    1706:	83 c4 10             	add    $0x10,%esp				// esp + 16
    1709:	81 7c 24 04 a3 00 00 	cmpl   $0xa3,0x4(%esp)			// esp+4 - a3(163) != 0
    1710:	00 
    1711:	75 0a                	jne    171d <Holoro+0x46>		// NOT EQUAL TO 0 == ERROR
    1713:	8d 74 24 04          	lea    0x4(%esp),%esi 			// esi = esp + 4 = ALAMAT 163
    1717:	8d 7c 24 18          	lea    0x18(%esp),%edi			// edi = esp + 24 = ALAMAT ANGKA KE-6
    171b:	eb 13                	jmp    1730 <Holoro+0x59>		// go to 1730
    171d:	e8 7b 09 00 00       	call   209d <illegal_move>
    1722:	eb ef                	jmp    1713 <Holoro+0x3c>
    1724:	e8 74 09 00 00       	call   209d <illegal_move>
    1729:	83 c6 04             	add    $0x4,%esi 				// esi + 4 = ANGKA KE-3
    172c:	39 fe                	cmp    %edi,%esi 				// esi - edi = 
    172e:	74 0f                	je     173f <Holoro+0x68> 		// go to 173f
    1730:	8b 16                	mov    (%esi),%edx				// edx = *esi = 163
    1732:	89 d0                	mov    %edx,%eax				// eax = edx = 163
    1734:	d1 f8                	sar    %eax						// eax >> 1 = 81
    1736:	31 d0                	xor    %edx,%eax				// eax = eax ^ edx = 0
    1738:	39 46 04             	cmp    %eax,0x4(%esi)			// esi+4-eax = ANGKA KE-2 
    173b:	74 ec                	je     1729 <Holoro+0x52>		// go to 1729
    173d:	eb e5                	jmp    1724 <Holoro+0x4d>  		// jump to 1724 (ERROR)
    173f:	8b 44 24 1c          	mov    0x1c(%esp),%eax 			// eax = esp + 28
    1743:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax 					// BRUH IDK
    174a:	75 07                	jne    1753 <Holoro+0x7c>				// wot?
    174c:	83 c4 20             	add    $0x20,%esp				// esp + 32 POP
    174f:	5b                   	pop    %ebx
    1750:	5e                   	pop    %esi
    1751:	5f                   	pop    %edi
    1752:	c3                   	ret
    1753:	e8 08 19 00 00       	call   3060 <__stack_chk_fail_local>


00002185 <read_six_numbers>:
    2185:	f3 0f 1e fb          	endbr32
    2189:	53                   	push   %ebx
    218a:	83 ec 08             	sub    $0x8,%esp
    218d:	e8 5e f2 ff ff       	call   13f0 <__x86.get_pc_thunk.bx>
    2192:	81 c3 ce 4d 00 00    	add    $0x4dce,%ebx						// ebx += 4dce
    2198:	8b 44 24 14          	mov    0x14(%esp),%eax 					// eax = esp + 20
    219c:	8d 50 14             	lea    0x14(%eax),%edx 
    219f:	52                   	push   %edx 							// push eax + 20
    21a0:	8d 50 10             	lea    0x10(%eax),%edx 
    21a3:	52                   	push   %edx 							// push eax + 16
    21a4:	8d 50 0c             	lea    0xc(%eax),%edx 
    21a7:	52                   	push   %edx 							// push eax + 12
    21a8:	8d 50 08             	lea    0x8(%eax),%edx
    21ab:	52                   	push   %edx 							// push eax + 8
    21ac:	8d 50 04             	lea    0x4(%eax),%edx
    21af:	52                   	push   %edx 							// push eax + 4
    21b0:	50                   	push   %eax 							// push eax
    21b1:	8d 83 47 db ff ff    	lea    -0x24b9(%ebx),%eax
    21b7:	50                   	push   %eax 							// push ebx-24b9
    21b8:	ff 74 24 2c          	push   0x2c(%esp) 						// push esp+44
    21bc:	e8 1f f1 ff ff       	call   12e0 <__isoc99_sscanf@plt> 		// scanf("%d %d %d %d %d %d %d %d", esp+44, ebx-24b9, eax, eax+4, eax+8, eax+12, eax+16, eax+20);
    21c1:	83 c4 20             	add    $0x20,%esp 						// POP ESP 32
    21c4:	83 f8 05             	cmp    $0x5,%eax
    21c7:	7e 05                	jle    21ce <read_six_numbers+0x49> 	// if (eax >= 5) go to 21ce (ERROR, EAX MUST NOT BE >= 5)
    21c9:	83 c4 08             	add    $0x8,%esp  						// POP ESP 8
    21cc:	5b                   	pop    %ebx
    21cd:	c3                   	ret 									// return eax
    21ce:	e8 ca fe ff ff       	call   209d <illegal_move>


    eax = 0xffffd634
    esp+60 = 0x5655c8f0