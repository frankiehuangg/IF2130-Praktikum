00001839 <func4>:
    1839:	f3 0f 1e fb          	endbr32
    183d:	56                   	push   %esi
    183e:	53                   	push   %ebx
    183f:	83 ec 04             	sub    $0x4,%esp
    1842:	8b 44 24 10          	mov    0x10(%esp),%eax              // eax = int[1]
    1846:	8b 54 24 14          	mov    0x14(%esp),%edx              // edx = 0
    184a:	8b 4c 24 18          	mov    0x18(%esp),%ecx              // ecx = 14
    184e:	89 ce                	mov    %ecx,%esi                    // esi = ecx = 14
    1850:	29 d6                	sub    %edx,%esi                    // esi = esi - edx == 14 - 0 = 14
    1852:	89 f3                	mov    %esi,%ebx                    // ebx = esi = 14
    1854:	c1 eb 1f             	shr    $0x1f,%ebx                   // ebx = ebx >> 31 == 14 >> 31                  [LOGICAL]
    1857:	01 f3                	add    %esi,%ebx                    // ebx = ebx + esi = (14 >> 31) + 14
    1859:	d1 fb                	sar    %ebx                         // ebx = ebx >> 1 = ((14 >> 31) + 14) >> 1      [ARITHMETIC]
    185b:	01 d3                	add    %edx,%ebx                    // ebx = ebx + edx = ((14 >> 31) + 14) >> 1
    185d:	39 c3                	cmp    %eax,%ebx
    185f:	7f 0a                	jg     186b <func4+0x32>            // if (ebx > eax) go to 186b
    1861:	7c 1d                	jl     1880 <func4+0x47>            // if (ebx < eax) go to 1880
    1863:	89 d8                	mov    %ebx,%eax                            // eax = ebx
    1865:	83 c4 04             	add    $0x4,%esp                            // POP ESP 4
    1868:	5b                   	pop    %ebx             
    1869:	5e                   	pop    %esi
    186a:	c3                   	ret                                         // return
    186b:	83 ec 04             	sub    $0x4,%esp                        // PUSH ESP 4
    186e:	8d 4b ff             	lea    -0x1(%ebx),%ecx                  // ecx = ebx-1
    1871:	51                   	push   %ecx
    1872:	52                   	push   %edx
    1873:	50                   	push   %eax
    1874:	e8 c0 ff ff ff       	call   1839 <func4>                     // call func4(eax, edx, ecx)
    1879:	83 c4 10             	add    $0x10,%esp                       // POP ESP 16
    187c:	01 c3                	add    %eax,%ebx                        // ebx = ebx + eax
    187e:	eb e3                	jmp    1863 <func4+0x2a>                // go to 1863
    1880:	83 ec 04             	sub    $0x4,%esp                                // PUSH ESP 4
    1883:	51                   	push   %ecx                                     // push ecx
    1884:	8d 53 01             	lea    0x1(%ebx),%edx                           // edx = ebx + 1
    1887:	52                   	push   %edx                                     // push edx
    1888:	50                   	push   %eax                                     // push eax
    1889:	e8 ab ff ff ff       	call   1839 <func4>                             // func4(eax,ebx+1,ecx)
    188e:	83 c4 10             	add    $0x10,%esp                       // POP ESP 16
    1891:	01 c3                	add    %eax,%ebx                        // ebx = ebx + eax
    1893:	eb ce                	jmp    1863 <func4+0x2a>                // go to 1863

00001895 <Secret_Society>:
    1895:	f3 0f 1e fb          	endbr32
    1899:	53                   	push   %ebx
    189a:	83 ec 18             	sub    $0x18,%esp
    189d:	e8 4e fb ff ff       	call   13f0 <__x86.get_pc_thunk.bx>
    18a2:	81 c3 be 56 00 00    	add    $0x56be,%ebx
    18a8:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
    18ae:	89 44 24 0c          	mov    %eax,0xc(%esp)
    18b2:	31 c0                	xor    %eax,%eax
    18b4:	8d 44 24 08          	lea    0x8(%esp),%eax
    18b8:	50                   	push   %eax
    18b9:	8d 44 24 08          	lea    0x8(%esp),%eax
    18bd:	50                   	push   %eax
    18be:	8d 83 53 db ff ff    	lea    -0x24ad(%ebx),%eax
    18c4:	50                   	push   %eax
    18c5:	ff 74 24 2c          	push   0x2c(%esp)
    18c9:	e8 12 fa ff ff       	call   12e0 <__isoc99_sscanf@plt>       // push 2 integer
    18ce:	83 c4 10             	add    $0x10,%esp
    18d1:	83 f8 02             	cmp    $0x2,%eax                        // MUST HAVE 2 INPUT
    18d4:	75 07                	jne    18dd <Secret_Society+0x48>       // else go to 18dd(illegal)
    18d6:	83 7c 24 04 0e       	cmpl   $0xe,0x4(%esp)                   // int[1] <= 14 [unsigned]
    18db:	76 05                	jbe    18e2 <Secret_Society+0x4d>       // go to 18e2
    18dd:	e8 bb 07 00 00       	call   209d <illegal_move>
    18e2:	83 ec 04             	sub    $0x4,%esp                        // PUSH ESP 4
    18e5:	6a 0e                	push   $0xe                             // push 14
    18e7:	6a 00                	push   $0x0                             // push 0
    18e9:	ff 74 24 10          	push   0x10(%esp)                       // push esp+16 = int[1]?
    18ed:	e8 47 ff ff ff       	call   1839 <func4>                     // go to func4(15,0,INT[1])
    18f2:	83 c4 10             	add    $0x10,%esp                       // POP ESP 16
    18f5:	83 f8 23             	cmp    $0x23,%eax
    18f8:	75 07                	jne    1901 <Secret_Society+0x6c>       // if (eax != 0x23) illegal_move
    18fa:	83 7c 24 08 23       	cmpl   $0x23,0x8(%esp)
    18ff:	74 05                	je     1906 <Secret_Society+0x71>       // if (int[2] == 0x23) go to 1906
    1901:	e8 97 07 00 00       	call   209d <illegal_move>
    1906:	8b 44 24 0c          	mov    0xc(%esp),%eax                   // eax = int[3]?
    190a:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
    1911:	75 05                	jne    1918 <Secret_Society+0x83>
    1913:	83 c4 18             	add    $0x18,%esp
    1916:	5b                   	pop    %ebx                 
    1917:	c3                   	ret
    1918:	e8 43 17 00 00       	call   3060 <__stack_chk_fail_local>